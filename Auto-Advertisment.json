{
  "name": "Auto-Advertisment",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upload-excel",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "eff817b5-d933-4d34-b2c6-a6b04d722c25",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        560,
        -96
      ],
      "webhookId": "29ba1991-f925-4eb7-9154-d8b3936f1c15"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "file",
        "options": {
          "headerRow": true
        }
      },
      "id": "d37aabdc-a7ce-4404-b6b2-cc8f29af0646",
      "name": "Extract from File",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        784,
        -96
      ]
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "prompt": {
          "messages": [
            {
              "role": "system",
              "content": "=You are a professional marketing copywriter and AI prompt engineer.\n\nYour task:\nFor every product JSON you receive, output a single JSON object with exactly two fields:\n1. \"advertisementText\": A short, persuasive Hebrew ad caption written as if the business owner is inviting customers.  \n   - Must be professional, authentic, and sales-oriented.  \n   - Include the price if available.  \n   - Always end with a clear call-to-action.  \n   - No emojis, no slang, no unnecessary quotes inside the string.  \n\n2. \"imagePrompt\": A descriptive English prompt for an AI image generator.  \n   - Always include the original product image URL (ImageUrl) with instructions to keep the product unchanged.  \n   - Describe how to embed the product into a professional advertisement scene.  \n   - Use commercial photography style keywords (lighting, background, composition).  \n   - Output in fluent English, no Hebrew here.  \n\n⚠️ STRICT RULES:\n- Output must be a single valid JSON object only, no text before or after.  \n- Escape any quotes inside values properly.  \n- Do not wrap the response in Markdown, triple backticks, or explanation.  \n"
            },
            {
              "content": "=={{ (() => {\n  const f = $json;\n\n  const fields = {\n    name:        f.name ?? f.Name ?? f.productName,\n    price:       f.price ?? f.Price,\n    description: f.description ?? f.Description,\n    imageUrl:    f.imageUrl ?? f.ImageUrl,\n    businessName:f.businessName ?? f.BusinessName,\n    discount:    f.discount ?? f.Discount,\n    currency:    f.currency ?? f.Currency,\n  };\n\n  for (const k of Object.keys(fields)) {\n    const v = fields[k];\n    if (!v || String(v).toLowerCase() === 'undefined') delete fields[k];\n  }\n\n  return `Here is the product JSON:\n${JSON.stringify(fields)}\n\nGenerate the output in the exact format defined in the system prompt.`;\n})() }}\n"
            }
          ]
        },
        "options": {},
        "requestOptions": {}
      },
      "id": "637cec73-a2fc-4fee-832e-e531fec0e448",
      "name": "OpenAI Generate Caption1",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        1008,
        128
      ],
      "credentials": {
        "openAiApi": {
          "id": "s04FTiyGh7Ah1MGW",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://ads.srv1040889.hstgr.cloud/upload-products",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"businessId\": \"yQB2mZ6EGAqNuvZMKu27\",\n  \"businessInfo\": {\n    \"name\": \"Test Shop\",\n    \"owner\": \"John Doe\"\n  },\n  \"products\": JSON.parse(JSON.stringify($items().map(item => item.json)))\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1008,
        -96
      ],
      "id": "92a1cc12-cb3b-4025-99ed-6d656936143e",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "content": "Handles the upload of an Excel file containing products from a business.\nThis workflow parses the file, structures the data, and sends it to the backend so all products are stored and ready for later processing.",
        "height": 128,
        "width": 464
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        32,
        -96
      ],
      "id": "ba0a051a-41c7-4a0e-b4ea-f0c603375656",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "url": "=https://ads.srv1040889.hstgr.cloud/next-product/{{ $json.body.businessId }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        784,
        128
      ],
      "id": "9b477602-976d-4599-991e-70126c5d0f22",
      "name": "HTTP Request1",
      "alwaysOutputData": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://n8n.srv1040889.hstgr.cloud/webhook/6981caee-1043-47fd-89bb-767566753e05",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "businessId",
              "value": "={{ $json.businessId }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1232,
        -96
      ],
      "id": "b17425e1-837c-4656-9710-337b8c73ebe0",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "6981caee-1043-47fd-89bb-767566753e05",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        560,
        128
      ],
      "id": "de77824e-a86b-4717-b904-586bbaa2a361",
      "name": "Webhook1",
      "webhookId": "6981caee-1043-47fd-89bb-767566753e05"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://ads.srv1040889.hstgr.cloud/update-product/{{ $('HTTP Request1').item.json.businessId }}/{{ $('HTTP Request1').item.json.productId }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "advertisementText",
              "value": "={{ $json.advertisementText }}"
            },
            {
              "name": "=imagePrompt",
              "value": "={{ $json.imagePrompt }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1456,
        128
      ],
      "id": "cec4f2d3-7569-4be4-9643-eb2dd20e78db",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => {\n  let raw = item.json?.message?.content ?? '';\n  let parsed = {};\n\n  try {\n    // First attempt: direct parse\n    parsed = JSON.parse(raw);\n  } catch (e) {\n    try {\n      // Cleanup: remove stray line breaks, fix escaped quotes\n      const clean = raw\n        .replace(/(\\r\\n|\\n|\\r)/gm, ' ')\n        .replace(/\\s+/g, ' ')\n        .trim();\n      parsed = JSON.parse(clean);\n    } catch (e2) {\n      // Final fallback: treat as plain text\n      parsed = { advertisementText: raw, imagePrompt: '' };\n    }\n  }\n\n  const strip = (s) => {\n    if (!s || typeof s !== \"string\") return \"\";\n    return s.replace(/[\\u2028\\u2029]/g, ' ')\n            .replace(/\\r?\\n/g, ' ')\n            .replace(/\\s+/g, ' ')\n            .trim();\n  };\n\n  return {\n    json: {\n      businessId: item.json.businessId,\n      productId: item.json.productId,\n      advertisementText: strip(parsed.advertisementText),\n      imagePrompt: strip(parsed.imagePrompt),\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1232,
        128
      ],
      "id": "ec681a05-fec2-41dc-8b36-63d0247c8c8e",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "content": "Takes existing products from the database and automatically generates marketing content for each — including a Hebrew advertisement caption and an English image prompt.\nIt uses OpenAI to craft both text and visual descriptions, then saves the generated data back to the backend for display or further automation.",
        "height": 128,
        "width": 464
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        32,
        128
      ],
      "id": "caac8c6a-f491-43eb-a2d1-3e8736415423",
      "name": "Sticky Note1"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Generate Caption1": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "OpenAI Generate Caption1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "28fa6c06-2b83-4e01-b143-84d3a2123d5b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2d26db11a1e0b40eab8bf56afc51e576ff38f35c52ec52a2996c87ceadcc462a"
  },
  "id": "CqPvaNG2PESfiIaI",
  "tags": []
}